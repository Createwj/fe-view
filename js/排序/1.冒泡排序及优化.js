let a = [ 8, 7, 5, 4, 3, 2, 9, 1, 6, 0 ];

/**
 * 冒泡排序
 * **/

/**
 * 描述：
 *      重复地走访过要排序的数列，一次比较两个元素，如果它们的顺序错误就把它们交换过来
 *      走访数列的工作是重复地进行直到没有再需要交换
 *
 * 实现：
 *      <1>.比较相邻的元素。如果第一个比第二个大，就交换它们两个
 *      <2>.对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对，这样在最后的元素应该会是最大的数；
 *      <3>.针对所有的元素重复以上的步骤，除了最后一个；
 *      <4>.重复步骤1~3，直到排序完成。
 **/

function bubbleSort(arr) {
  let len = arr.length;
  for(let i = 0; i < len; i++) {
    for(let j = 0; j < len - 1 - i; j++) {
      if (arr[j] > arr[j+1]) {        //相邻元素两两对比
        let temp = arr[j+1];        //元素交换
        arr[j+1] = arr[j];
        arr[j] = temp;
      }
    }
    console.log(arr)
  }
  return arr
}

/**
 * i = 0; j = 0  [ 7, 8, 5, 4, 3, 2, 9, 1, 6, 0 ];
 * i = 0; j = 1  [ 7, 5, 8, 4, 3, 2, 9, 1, 6, 0 ];
 * i = 0; j = 2  [ 7, 5, 4, 8, 3, 2, 9, 1, 6, 0 ];
 * i = 0; j = 3  [ 7, 5, 4, 3, 8, 2, 9, 1, 6, 0 ];
 * i = 0; j = 4  [ 7, 5, 4, 3, 2, 8, 9, 1, 6, 0 ];
 * i = 0; j = 5  [ 7, 5, 4, 3, 2, 8, 9, 1, 6, 0 ];
 * i = 0; j = 6  [ 7, 5, 4, 3, 2, 1, 8, 9, 6, 0 ];
 * i = 0; j = 7  [ 7, 5, 4, 3, 2, 1, 8, 6, 9, 0 ];
 * i = 0; j = 8  [ 7, 5, 4, 3, 2, 1, 8, 6, 0, 9 ];
 * i = 0; j = 9  [ 7, 5, 4, 3, 2, 8, 1, 6, 0, 9 ];
 *
 * 重复到 i = 9 完成排序
 *
 * **/

/**
 * 冒泡排序优化 已经比较过的 之后没必要进行再次判断
 * **/

function bubbleSort3(arr3) {
  var low = 0;
  var high= arr.length-1; //设置变量的初始值
  var tmp,j;
  console.time('2.改进后冒泡排序耗时');
  while (low < high) {
    for (j= low; j< high; ++j) //正向冒泡,找到最大者
      if (arr[j]> arr[j+1]) {
        tmp = arr[j]; arr[j]=arr[j+1];arr[j+1]=tmp;
      }
    --high;                 //修改high值, 前移一位
    for (j=high; j>low; --j) //反向冒泡,找到最小者
      if (arr[j]<arr[j-1]) {
        tmp = arr[j]; arr[j]=arr[j-1];arr[j-1]=tmp;
      }
    ++low;                  //修改low值,后移一位
  }
  console.timeEnd('2.改进后冒泡排序耗时');
  return arr3;
}
var arr3=[3,44,38,5,47,15,36,26,27,2,46,4,19,50,48];
console.log(bubbleSort3(arr3));//[2, 3, 4, 5, 15, 19, 26, 27, 36, 38, 44, 46, 47, 48, 50]

